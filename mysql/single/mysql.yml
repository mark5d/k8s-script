apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin  # 主mysql激活二进制日志
    #设置时区和字符集
    default-time-zone='+8:00'
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci'
---
apiVersion: apps/v1
kind: StatefulSet                                 #副本控制器deployment，管理pod和RS
metadata:
  name: mysql                                            #deployment的名称，全局唯一
spec:
  replicas: 1                                                #Pod副本期待数量
  selector:
    matchLabels:                                         #定义RS的标签
      app: mysql 
  serviceName: mysql                                         #符合目标的Pod拥有此标签                        #滚动升级，逐步替换的策略
  template:                                                #根据此模板创建Pod的副本（实例）
    metadata:
      labels:
        app: mysql                                        #Pod副本的标签，对应RS的Selector
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:8.0.27
        command:
        - bash
        - "-c"
        - |
          cp /mnt/config-map/master.cnf /mnt/conf.d/
        volumeMounts:
        - name: config-map
          mountPath: /mnt/config-map
      containers:                                          #Pod里容器的定义部分
      - name: mysql                                     #容器的名称
        image: mysql:8.0.27                               #容器对应的docker镜像
        args: ["--default-authentication-plugin=mysql_native_password","--character-set-server=utf8mb4","--collation-server=utf8mb4_unicode_ci"]
        volumeMounts:                                #容器内挂载点的定义部分
        - name: mysql-data
          mountPath: /var/lib/mysql               #容器内mysql的数据目录
        - name: mysql-logs
          mountPath: /var/log/mysql              #容器内mysql的日志目录
        ports:
        - containerPort: 3306                         #容器暴露的端口号
        env:                                                   #写入到容器内的环境容量
        - name: MYSQL_ROOT_PASSWORD   #定义了一个mysql的root密码的变量
          value: "123456"
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      volumes:                                             #本地需要挂载到容器里的数据卷定义部分
      - name: mysql-data
        hostPath:
          path: /data/mysql/data                   #本地存放mysql数据的目录=
      - name: mysql-logs
        hostPath:
          path: /data/mysql/logs                    #本地存入mysql日志的目录
      - name: config-map
        configMap:
          name: mysql